{
  "content": "import type { ConditionalValue, Nested } from './conditions'\nimport type { AtRule, Globals, PropertiesFallback } from './csstype'\nimport type { SystemProperties, CssVarProperties } from './style-props'\n\ntype String = string & {}\ntype Number = number & {}\n\nexport type Pretty<T> = { [K in keyof T]: T[K] } & {}\n\nexport type DistributiveOmit<T, K extends keyof any> = T extends unknown ? Omit<T, K> : never\n\nexport type DistributiveUnion<T, U> = {\n  [K in keyof T]: K extends keyof U ? U[K] | T[K] : T[K]\n} & DistributiveOmit<U, keyof T>\n\nexport type Assign<T, U> = {\n  [K in keyof T]: K extends keyof U ? U[K] : T[K]\n} & U\n\n/* -----------------------------------------------------------------------------\n * Native css properties\n * -----------------------------------------------------------------------------*/\n\ntype DashedIdent = `--${string}`\n\ntype StringToMultiple<T extends string> = T | `${T}, ${T}`\n\nexport type PositionAreaAxis =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'x-start'\n  | 'x-end'\n  | 'span-x-start'\n  | 'span-x-end'\n  | 'x-self-start'\n  | 'x-self-end'\n  | 'span-x-self-start'\n  | 'span-x-self-end'\n  | 'span-all'\n  | 'top'\n  | 'bottom'\n  | 'span-top'\n  | 'span-bottom'\n  | 'y-start'\n  | 'y-end'\n  | 'span-y-start'\n  | 'span-y-end'\n  | 'y-self-start'\n  | 'y-self-end'\n  | 'span-y-self-start'\n  | 'span-y-self-end'\n  | 'block-start'\n  | 'block-end'\n  | 'span-block-start'\n  | 'span-block-end'\n  | 'inline-start'\n  | 'inline-end'\n  | 'span-inline-start'\n  | 'span-inline-end'\n  | 'self-block-start'\n  | 'self-block-end'\n  | 'span-self-block-start'\n  | 'span-self-block-end'\n  | 'self-inline-start'\n  | 'self-inline-end'\n  | 'span-self-inline-start'\n  | 'span-self-inline-end'\n  | 'start'\n  | 'end'\n  | 'span-start'\n  | 'span-end'\n  | 'self-start'\n  | 'self-end'\n  | 'span-self-start'\n  | 'span-self-end'\n\ntype PositionTry =\n  | 'normal'\n  | 'flip-block'\n  | 'flip-inline'\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'block-start'\n  | 'block-end'\n  | 'inline-start'\n  | 'inline-end'\n  | DashedIdent\n\nexport interface ModernCssProperties {\n  anchorName?: Globals | 'none' | DashedIdent | StringToMultiple<DashedIdent>\n  anchorScope?: Globals | 'none' | 'all' | DashedIdent | StringToMultiple<DashedIdent>\n  fieldSizing?: Globals | 'fixed' | 'content'\n  interpolateSize?: Globals | 'allow-keywords' | 'numeric-only'\n  positionAnchor?: Globals | 'auto' | DashedIdent\n  positionArea?: Globals | 'auto' | PositionAreaAxis | `${PositionAreaAxis} ${PositionAreaAxis}` | String\n  positionTry?: Globals | StringToMultiple<PositionTry> | String\n  positionTryFallback?: Globals | 'none' | StringToMultiple<PositionTry> | String\n  positionTryOrder?: Globals | 'normal' | 'most-width' | 'most-height' | 'most-block-size' | 'most-inline-size'\n  positionVisibility?: Globals | 'always' | 'anchors-visible' | 'no-overflow'\n  textWrapMode?: Globals | 'wrap' | 'nowrap'\n  textSpacingTrim?: Globals | 'normal' | 'space-all' | 'space-first' | 'trim-start'\n  textWrapStyle?: Globals | 'auto' | 'balance' | 'pretty' | 'stable'\n}\n\nexport type CssProperty = keyof PropertiesFallback\n\nexport interface CssProperties extends PropertiesFallback<String | Number>, CssVarProperties, ModernCssProperties {}\n\nexport interface CssKeyframes {\n  [name: string]: {\n    [time: string]: CssProperties\n  }\n}\n\n/* -----------------------------------------------------------------------------\n * Conditional css properties\n * -----------------------------------------------------------------------------*/\n\ninterface GenericProperties {\n  [key: string]: ConditionalValue<String | Number | boolean>\n}\n\n/* -----------------------------------------------------------------------------\n * Native css props\n * -----------------------------------------------------------------------------*/\n\nexport type NestedCssProperties = Nested<CssProperties>\n\nexport type SystemStyleObject = Omit<Nested<SystemProperties & CssVarProperties>, 'base'>\n\nexport interface GlobalStyleObject {\n  [selector: string]: SystemStyleObject\n}\nexport interface ExtendableGlobalStyleObject {\n  [selector: string]: SystemStyleObject | undefined\n  extend?: GlobalStyleObject | undefined\n}\n\n/* -----------------------------------------------------------------------------\n * Composition (text styles, layer styles)\n * -----------------------------------------------------------------------------*/\n\ntype FilterStyleObject<P extends string> = {\n  [K in P]?: K extends keyof SystemStyleObject ? SystemStyleObject[K] : unknown\n}\n\nexport type CompositionStyleObject<Property extends string> = Nested<FilterStyleObject<Property> & CssVarProperties>\n\n/* -----------------------------------------------------------------------------\n * Font face\n * -----------------------------------------------------------------------------*/\n\nexport type GlobalFontfaceRule = Omit<AtRule.FontFaceFallback, 'src'> & Required<Pick<AtRule.FontFaceFallback, 'src'>>\n\nexport type FontfaceRule = Omit<GlobalFontfaceRule, 'fontFamily'>\n\nexport interface GlobalFontface {\n  [name: string]: FontfaceRule | FontfaceRule[]\n}\n\nexport interface ExtendableGlobalFontface {\n  [name: string]: FontfaceRule | FontfaceRule[] | GlobalFontface | undefined\n  extend?: GlobalFontface | undefined\n}\n\n/* -----------------------------------------------------------------------------\n * Jsx style props\n * -----------------------------------------------------------------------------*/\ninterface WithCss {\n  css?: SystemStyleObject | SystemStyleObject[]\n}\n\nexport type JsxStyleProps = SystemStyleObject & WithCss\n\nexport interface PatchedHTMLProps {\n  htmlWidth?: string | number\n  htmlHeight?: string | number\n  htmlTranslate?: 'yes' | 'no' | undefined\n  htmlContent?: string\n}\n\nexport type OmittedHTMLProps = 'color' | 'translate' | 'transition' | 'width' | 'height' | 'content'\n\ntype WithHTMLProps<T> = DistributiveOmit<T, OmittedHTMLProps> & PatchedHTMLProps\n\nexport type JsxHTMLProps<T extends Record<string, any>, P extends Record<string, any> = {}> = Assign<\n  WithHTMLProps<T>,\n  P\n>\n"
}